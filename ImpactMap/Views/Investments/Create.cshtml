@model ImpactMap.Controllers.InvestmentViewModel
@{
    ViewBag.Title = "Create Investment";

}
@*Investments create form*@
<div class="container">
    <div class="pageInfo">

        <h2><i class="fa fa-plus-circle" aria-hidden="true"></i>@ViewBag.Title</h2>

        <div class="subNav">
            <a href=@Url.Action("Index", "Investments")><i class="fa fa-list-alt" aria-hidden="true" title="Investments List"></i></a>
            <a href=@Url.Action("Index", "Dashboard")><i class="fa fa-tachometer" aria-hidden="true" title="Return to Dashboard"></i></a>
        </div>

    </div>
    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "createInvestmentForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="col-md-6">
                @*Date field*@
                <div class="form-group">
                  
                        @Html.LabelFor(model => model.Investment.date, htmlAttributes: new { @class = "control-label" })
                        <span class="fa fa-question-circle tts hint" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["date"]"></span>
                        @Html.EditorFor(model => model.Investment.date, new { htmlAttributes = new { @type = "date", @class = "form-control" } })
                   
                    @Html.ValidationMessageFor(model => model.Investment.date, "", new { @class = "text-danger" })
                </div>
                @*Value field*@

                <div class="form-group inlineFormGroup">
                    <div>
                        @Html.LabelFor(model => model.Investment.amount, htmlAttributes: new { @class = "control-label" })
                        <span class="fa fa-question-circle tts" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["amount"]"></span>
                        @Html.EditorFor(model => model.Investment.amount, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Investment.amount, "", new { @class = "text-danger" })
                    </div>

                    @*In Kind checkbox - Marks the donation as inKind*@
                    <div class="inlineElement">
                        @Html.LabelFor(model => model.Investment.isInKind, htmlAttributes: new { @class = "control-label"})
                        <span class="fa fa-question-circle tts" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["inKind"]"></span>
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Investment.isInKind)
                            @Html.ValidationMessageFor(model => model.Investment.isInKind, "", new { @class = "text-danger" })
                        </div>

                    </div>

                </div>


                @*ProjectFrom dropdown populates based on current entity, sent in via the Entities/Create GET action*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Investment.projectFrom, htmlAttributes: new { @class = "control-label"})
                    <span class="fa fa-question-circle tts" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["projectFrom"]"></span>

                    <select name="projectFrom_ID" class="form-control">
                        <option value="0">No Project Selected</option>
                        @foreach (var project in Model.Projects)
                        {
                            <option value=@project.ID>@project.name</option>
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.Investment.projectFrom_ID, "", new { @class = "text-danger" })

                </div>
                @*EntityTo dropdown -- when this dropdown changes it sends its value to the javascript below to update the projectTo dropdown*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Investment.entityTo, htmlAttributes: new { @class = "control-label"})
                    <span class="fa fa-question-circle tts" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["entityTo"]"></span>

                    <select name="entityTo_ID" id="recipientSelect" class="form-control">
                        @foreach (var entity in Model.Entities)
                        {
                            <option value=@entity.ID>@entity.name</option>
                        }
                    </select>

                </div>
                @*ProjectTo dropdown populates based on the EntityTo selected above*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Investment.projectTo, htmlAttributes: new { @class = "control-label"})
                    <span class="fa fa-question-circle tts" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["projectTo"]"></span>
                    <select name="projectTo_ID" id="ProjectToDropdown" class="form-control"></select>

                </div>

            </div>

            <div class="col-md-6">

                @*Description input form*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Investment.description, htmlAttributes: new { @class = "control-label" })
                    <span class="fa fa-question-circle tts" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["ivmDescription"]"></span>


                    @Html.EditorFor(model => model.Investment.description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Investment.description, "", new { @class = "text-danger" })


                </div>

                @*Categories list with checkboxes - populates using an ajax call (load_categories) below*@
                <div class="form-group">
                    <label title=@ViewBag.Tooltips["categories"]>Investment Tags</label>
                    <span class="fa fa-question-circle tts" data-toggle="tooltip" data-placement="right" title="@ViewBag.Tooltips["categories"]"></span>
                    <div class="col-md-10">
                        <div id="CatList">
                            <ul></ul>
                        </div>
                        @*Hidden input field that javascript below adds stuff to, this is sent to the controller*@
                        <input name="categories" id="categories" type="hidden" />
                        @*@Html.ActionLink("Add New Tag", "Create", "Categories")*@


                        <div class="form-group">
                            <div>
                                <input type="button" id="submitButton" value="Create" class="button btn-default" />
                            </div>
                        </div>

                    </div>
                </div>



            </div>

            <br />
        </div>
    }

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryMask")
    <script>
        //selectedCategories is an array which is put into the hidden categories field and then sent to the controller
        selectedCategories = [];

        //this ajax call goes over to public/usercategories and snatches up the categories in the system
        //it then puts the ones that are NOT base categories into the categories checkbox area
        //when they are clicked, it triggers toggle_category
        function load_categories() {
            $.ajax({
                url: '/public/usercategories',
                type: 'GET',
                success: function (data) {
                    //$('#CatList').html('<ul>');
                    data.map(function (category) {
                        if (category.isBase == false) {
                            $('#CatList ul').append('<li id="cat' + category.ID + '" data-id=' + category.ID + '><span id="catspan' + category.ID + '" class="fa fa-square-o"></span> ' + category.name + '</li>');
                            $('#cat' + category.ID).click(function () { toggle_category(category.ID + "," + category.baseID); });
                        }
                    });
                    //$('#CatList').append('</ul>');
                }
            })
        }

        function toggle_category(id) {
            // if it is not there
            // add the hidden input element
            // add the checkmark to the category
            if (!$('#catspan' + id).hasClass('fa fa-check-square-o')) {
                selectedCategories.push(id);
                $('#categories').val(selectedCategories.toString());
                console.log($('#categories').val())
                $('#catspan' + id).removeClass('fa fa-square-o');
                $('#catspan' + id).addClass('fa fa-check-square-o');
            }
            else {

                // if it is there
                // remove the hidden input element
                // remove the checkmark on the category
                var i = selectedCategories.indexOf(id);
                selectedCategories.splice(i, 1);
                $('#categories').val(selectedCategories.toString());
                $('#catadd' + id).remove();
                $('#catspan' + id).removeClass('fa fa-check-square-o');
                $('#catspan' + id).addClass('fa fa-square-o');

            }
        }


        //When the submit button is clicked, it
        $('#submitButton').click(function () {
            $('#createInvestmentForm').submit();
        });

        //This does an ajax call to populate the projectTo dropdown whenever the entityTo dropdown changes
        function updateProjectsOut() {
            $.ajax({
                url: '/Entities/GetProjectsOut/' + $('#recipientSelect').val() + '/',
                type: 'get',
                success: function (data) {
                    var html = '';
                    data.map(function (project) {
                        //html += '<li>' + replayEvent.DisplayName + '<span data-id=' + replayEvent.Id + ' class="DeleteButton btn btn-primary">Delete</span></li>'
                        html += '<option value=' + project.ID + '>' + project.name + '</option>'
                    });
                    $('#ProjectToDropdown').html(html);
                }
            });
        };
        $('#recipientSelect').change(updateProjectsOut);

        //These functions need to run on when the page loads, so they're collected into one function and then run on page load
        function initialize() {
            load_categories();
            updateProjectsOut();
            addCurrencyMask();
        }

        function addCurrencyMask() {
            $('#Investment_amount').mask('000,000,000,000.00', { reverse: true });
        }

        $(initialize);
        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })
    </script>
}